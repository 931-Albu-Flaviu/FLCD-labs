1. Language Specification
1.1 Alphabet:
	1.1.a. Upper (A-Z) and lower case letters (a-z)
	 1.1.b Decimal digits (0-9)
Lexic:
	a.Special symbols, representing:
		-operators: + - * / = < > <= == >= != && ||
		-separators: ; {} [] () , space ‘\n’
		-reserved words: int, char, if, else, while, read, print, list, return

	b.identifiers
		-sequence of letters and digits such that the first character is a letter
		-Rule:
			identifier = letter [{(letter | digit)}]
			letter = “A” | “B” | … | “Z” | “a” | “b” | … | “z”
			digit = “0” | “1” | … | “9”

	c.constants
		1.integer
			noconst::=[(+|-)] non_zero_number|"0"
            non_zero_digit::="1"|"2"|....|"9"
            non_zero_number::=non_zero_digit{no}
            no::=digit{no}
		2.character
			character::='letter'|'digit'
			-these are defined at b
		3.list of integers
			list_of_integer = “[“ elements “]”
			elements = element {“, ”  element}
			element = integer
		4.string
            constchar::="string"
            string::=character{string}
            character:=letter|digit

2. Syntax:
	a. Sintactical rules:
		program = “int_main () { “ statementList ” } “
		statementList = statement ";" { statement ";" }
		statement = simpleDeclaration | listDeclaration | simpleAssignmentStatement | ioStatement | whileStatement | ifStatement

		type = “int” | “char”
		simpleDeclaration = type identifier “=” expression
		listDeclaration = “list” identifier “=” list_of_integer
		simpleAssignmentStatement = identifier “=” expression
		listIdentifier = identifier "[" identifier | integerConstant "]"
		constant = integerConstant | character

		ioStatement =  “print “ (identifier | constant | listIdentifier) | “read ” identifier
		ifStatement = “if (” expression “) {” statementList “}”  {  “else {” statementList “}”  }
		whileStatement = “while (“ expression “) {“ statementList “}”

		expression = constantExpression | booleanExpression | arithmeticExpression | identifier | listIdentifier
		constantExpression = integerConstant | character
		arithmeticExpression = expression operator expression
		operator = “+” | “-” | “*” | “/”
		booleanExpression = expression booleanOperator expression
		booleanOperator = “==” | “<=” | “>=” | “<” | “>” | “!=” | “&&” | “||”


	b. Lexical rules:
		identifier = letter [{(letter | digit)}]
		letter = “A” | “B” | … | “Z” | “a” | “b” | … | “z”
		digit = “0” | “1” | … | “9”
