Alphabet:
    a. [A-Za-z]
    b. [0-9]
    c. Underscore ('_')
    d. All characters which are used in operators, separators etc (<,=,{ a.s.o.)
Lexic:
    a.Special symbols, representing:
        - operators: + - * / = < <= = >= == >> << [ ] ! != and or xor
        - separators { } ( ) . , : ; <space>
        - reserved words:
         number, array, std::cin, std::cout, if, else, for, while, go, string
    b.identifiers
         -a sequence of letters and digits, such that the first character is a letter, and intertwining is
        allowed (I.e. a2a,ba3a)
        identifier = letter {letter|digit}
        letter = capital_letter | small_letter
        capital_letter = "A" | "B" | . ..| "Z"
        small_letter = "a" | "b" | ... | "z"
        digit = "0" | non_zero_digit
        non_zero_digit = "1" | ... | "9"
    c.constants
        1.integer - rule: doesn't allow things like -0, 001 etc
          noconst::=[(+|-)] non_zero_number|"0"
            non_zero_digit::="1"|"2"|....|"9"
            non_zero_number::=non_zero_digit{no}
            no::=digit{no}
        2.character
             character=”letter”|”digit”
        3.string
             string=’{letter|digit}’
            CONSTANT = integer | character | string
Tokens list
(
)
[
]
{
}
;
:
<space>
.
,
+
-
*
/
=
<
>
<=
>=
==
!=
!
>>
<<
and
array
else
for
go
if
number
or
std::cin
std::cout
string
while
xor

Syntax
    program = "go" cmpdstmt
    declaration = type " " IDENTIFIER
    simpletype = "number" | "string"
    arraydecl = simpletype " " "array" "[" integer "]"
    type = simpletype|arraydecl
    cmpdstmt = "{" stmtlist "}"
    stmtlist = stmt | stmt ";" stmtlist
    stmt = simplstmt | structstmt
    simplstmt = (assignstmt | iostmt | declaration) “;”
    structstmt = cmpdstmt | ifstmt | whilestmt | forstmt
    ifstmt = "if" condition stmt ["else" stmt]
    forstmt = "for" forheader stmt
    forheader = "(" "number" assignstmt ";" condition ";" assignstmt ")"
    whilestmt = "while" condition stmt
    assignstmt = IDENTIFIER "=" expression
    expression = [expression("+"|"-")] term
    term = term("*" | "/") factor | factor
    factor = "(" expression ")" | int | IDENTIFIER | Indexedidentifier
    Indexedidentifier = IDENTIFIER “[“ integer “]”
    iostmt = ("std::cin" ">>" IDENTIFIER) | ("std::cout" "<<" (IDENTIFIER | CONSTANT))
    condition = "(" expression RELATION expression ")"
    RELATION = "<" | "<=" | "==" | "!=" | ">=" | ">"
